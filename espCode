#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>

// --- WiFi Credentials ---
const char* ssid = "BerpyDerpy";
const char* password = "anakonda1#";

// --- MQTT Broker Details ---
const char* mqtt_server = "47161622944946a5b84109affb7c79ce.s1.eu.hivemq.cloud";
const int mqtt_port = 8883; 
const char* mqtt_user = "ESP32";
const char* mqtt_password = "Anakonda1#";

// --- Motor Driver Pin Definitions ---
// DRV8833 has 4 input pins (2 per motor) and an enable pin
#define MOTOR_A_IN1 32  // Left motor input 1
#define MOTOR_A_IN2 26  // Left motor input 2
#define MOTOR_B_IN1 27  // Right motor input 1
#define MOTOR_B_IN2 14  // Right motor input 2

// --- HC-SR04 Ultrasonic Sensor Pins ---
const int trigPin = 5;   // GPIO5 on ESP32
const int echoPin = 18;  // GPIO18 on ESP32
const int servoPin = 13; // GPIO13 on ESP32

// --- MQTT Topics ---
const char* MQTT_COMMAND_TOPIC = "esp32/rover/command"; // Topic to listen for commands (FORWARD, LEFT, etc.)
const char* MQTT_STATUS_TOPIC = "esp32/rover/status";   // Topic to publish status
const char* MQTT_RADAR_TOPIC = "esp32/rover/radar";     // Topic to publish radar data

// --- MQTT Client Setup ---
#include <WiFiClientSecure.h>
WiFiClientSecure wifiClientSecure; // Use this for secure MQTT (port 8883)
PubSubClient client(wifiClientSecure);

// --- Radar Configuration ---
// Define sound speed in cm/us
const float soundSpeed = 0.034;
// Variables to store distance calculation
long duration;
float distanceCm;

// Servo configuration
Servo radarServo;
int angle = 0;
int scanDirection = 1;  // 1 for increasing angle, -1 for decreasing
const int scanMinAngle = 15;
const int scanMaxAngle = 165;
const int scanStep = 5;    // Degrees to move each step
const int servoDelay = 150; // Time to wait for servo to reach position

// --- Operational mode flags ---
bool radarEnabled = false; // Flag to enable/disable radar scanning

// --- Timing variables ---
long lastMsg = 0;
long lastRadarScan = 0;
const long radarScanInterval = 100; // Scan interval in milliseconds
char msg[80]; // Increased buffer for radar data

// --- Function Declarations ---
void setup_wifi();
void callback(char* topic, byte* payload, unsigned int length);
void reconnect();
void controlMotors(const char* command);
float measureDistance();
void moveServo();
void performRadarScan();

// --- Arduino Setup Function ---
void setup() {
  Serial.begin(115200);
  
  // Initialize motor pins
  pinMode(MOTOR_A_IN1, OUTPUT);
  pinMode(MOTOR_A_IN2, OUTPUT);
  pinMode(MOTOR_B_IN1, OUTPUT);
  pinMode(MOTOR_B_IN2, OUTPUT);
  
  // Make sure motors are stopped initially
  digitalWrite(MOTOR_A_IN1, LOW);
  digitalWrite(MOTOR_A_IN2, LOW);
  digitalWrite(MOTOR_B_IN1, LOW);
  digitalWrite(MOTOR_B_IN2, LOW);
  
  // Initialize HC-SR04 pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  // Initialize servo
  ESP32PWM::allocateTimer(0);
  radarServo.setPeriodHertz(50);    // Standard 50Hz servo
  radarServo.attach(servoPin, 500, 2400); // Adjust min/max pulse width if needed
  
  // Move servo to starting position
  radarServo.write(scanMinAngle);
  delay(500); // Give it time to reach position
  angle = scanMinAngle;

  setup_wifi(); // Connect to WiFi

  // Configure WiFiClientSecure for TLS (required by HiveMQ Cloud)
  wifiClientSecure.setInsecure(); // Use cautiously for testing ONLY

  client.setServer(mqtt_server, mqtt_port); // Set MQTT broker details
  client.setCallback(callback);             // Set message handler function
}

// --- Arduino Loop Function ---
void loop() {
  if (!client.connected()) {
    reconnect(); // Attempt to reconnect if MQTT connection is lost
  }
  client.loop(); // Process incoming messages and maintain connection

  // Check if it's time to perform a radar scan
  unsigned long currentMillis = millis();
  if (radarEnabled && currentMillis - lastRadarScan > radarScanInterval) {
    lastRadarScan = currentMillis;
    performRadarScan();
  }

  // Optional: Add a small delay to prevent busy-waiting
  delay(10);
}

// --- WiFi Setup Function ---
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros()); // Seed random number generator (used for client ID)

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// --- MQTT Message Callback Function ---
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");

  // Create a null-terminated string from the payload
  char message[length + 1];
  memcpy(message, payload, length);
  message[length] = '\0'; // Null-terminate the string
  Serial.println(message);

  // Process the command
  if (strcmp(topic, MQTT_COMMAND_TOPIC) == 0) { // Check if the message is on our command topic
    if (strcmp(message, "RADAR_ON") == 0) {
      radarEnabled = true;
      client.publish(MQTT_STATUS_TOPIC, "RADAR_ON");
    } 
    else if (strcmp(message, "RADAR_OFF") == 0) {
      radarEnabled = false;
      client.publish(MQTT_STATUS_TOPIC, "RADAR_OFF");
    }
    else {
      controlMotors(message);
      client.publish(MQTT_STATUS_TOPIC, message); // Publish status back
    }
  }
}

// --- Control Motors Function ---
void controlMotors(const char* command) {
  Serial.print("Executing command: ");
  Serial.println(command);
  
  if (strcmp(command, "FORWARD") == 0) {
    // Left motor forward
    digitalWrite(MOTOR_A_IN1, HIGH);
    digitalWrite(MOTOR_A_IN2, LOW);
    // Right motor forward
    digitalWrite(MOTOR_B_IN1, HIGH);
    digitalWrite(MOTOR_B_IN2, LOW);
  } 
  else if (strcmp(command, "BACKWARD") == 0) {
    // Left motor backward
    digitalWrite(MOTOR_A_IN1, LOW);
    digitalWrite(MOTOR_A_IN2, HIGH);
    // Right motor backward
    digitalWrite(MOTOR_B_IN1, LOW);
    digitalWrite(MOTOR_B_IN2, HIGH);
  }
  else if (strcmp(command, "LEFT") == 0) {
    // Left motor backward
    digitalWrite(MOTOR_A_IN1, LOW);
    digitalWrite(MOTOR_A_IN2, HIGH);
    // Right motor forward
    digitalWrite(MOTOR_B_IN1, HIGH);
    digitalWrite(MOTOR_B_IN2, LOW);
  }
  else if (strcmp(command, "RIGHT") == 0) {
    // Left motor forward
    digitalWrite(MOTOR_A_IN1, HIGH);
    digitalWrite(MOTOR_A_IN2, LOW);
    // Right motor backward
    digitalWrite(MOTOR_B_IN1, LOW);
    digitalWrite(MOTOR_B_IN2, HIGH);
  }
  else if (strcmp(command, "STOP") == 0) {
    // Stop both motors
    digitalWrite(MOTOR_A_IN1, LOW);
    digitalWrite(MOTOR_A_IN2, LOW);
    digitalWrite(MOTOR_B_IN1, LOW);
    digitalWrite(MOTOR_B_IN2, LOW);
  }
  else {
    Serial.println("Unknown command received");
  }
}

// --- Perform Radar Scan Function ---
void performRadarScan() {
  // Read distance at current angle
  float distance = measureDistance();
  
  // Format radar data as JSON
  snprintf(msg, sizeof(msg), "{\"angle\":%d,\"distance\":%.2f}", angle, distance);
  
  // Publish radar data to MQTT topic
  client.publish(MQTT_RADAR_TOPIC, msg);
  
  // Move to next angle
  moveServo();
}

// --- Measure Distance Function ---
float measureDistance() {
  // Clear the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  
  // Set the trigPin on HIGH state for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Read the echoPin, return the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * soundSpeed / 2;
  
  // Handle out of range readings
  if (distanceCm > 400 || distanceCm <= 0) {
    return 400; // Return max range if out of bounds
  }
  
  return distanceCm;
}

// --- Move Servo Function ---
void moveServo() {
  // Update angle based on scan direction
  angle += scanStep * scanDirection;
  
  // Check if we need to change direction
  if (angle >= scanMaxAngle) {
    angle = scanMaxAngle;
    scanDirection = -1;
  } else if (angle <= scanMinAngle) {
    angle = scanMinAngle;
    scanDirection = 1;
  }
  
  // Move servo to new position
  radarServo.write(angle);
}

// --- MQTT Reconnect Function ---
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32RoverClient-";
    clientId += String(random(0xffff), HEX);

    // Attempt to connect
    // Provide username and password for HiveMQ Cloud
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
      // Publish a connection message
      client.publish(MQTT_STATUS_TOPIC, "Connected");
      // Subscribe to the command topic
      client.subscribe(MQTT_COMMAND_TOPIC);
      Serial.print("Subscribed to topic: ");
      Serial.println(MQTT_COMMAND_TOPIC);
      
      // Send initial STOP command to ensure rover is stationary
      controlMotors("STOP");
      client.publish(MQTT_STATUS_TOPIC, "STOP");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state()); // Print the reason for failure
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
